(* These tests have been generated by DeepSeek V3 *)

open Definitions
open Aux_propositional
open Nf
open Proof_procedures_propositional
open Examples


let run_nf_tests () = 
    Printf.printf "=== Propositional Logic : Normal Form Tests ===\n";
    Printf.printf "NNF of %s: %s\n" (string_of_propositional_expr expr1) (string_of_propositional_expr (nnf expr1));
    Printf.printf "NNF of %s: %s\n" (string_of_propositional_expr expr2) (string_of_propositional_expr (nnf expr2));
    Printf.printf "NNF of %s: %s\n" (string_of_propositional_expr expr3) (string_of_propositional_expr (nnf expr3));
    Printf.printf "NNF of %s: %s\n" (string_of_propositional_expr expr4) (string_of_propositional_expr (nnf expr4));
    Printf.printf "Negation of %s: %s\n" (string_of_propositional_expr expr4) (string_of_propositional_expr (negate_propositional_expr expr4));
    Printf.printf "CNF of %s: %s\n" (string_of_propositional_expr expr4) (string_of_propositional_expr (cnf (nnf expr4)));
    Printf.printf "DNF of %s: %s\n" (string_of_propositional_expr expr4) (string_of_propositional_expr (dnf (nnf expr4)));
    Printf.printf "\n"


let run_proof_procedures_propositional_tests () =
    Printf.printf "=== Propositional Logic : Proof Procedure Tests ===\n";

    (* Test 1: Original expr4 *)
    let preprocessed = resolution_preprocessing expr4 in
    Printf.printf "Test 1 - Preprocessed %s: %s\n" (string_of_propositional_expr expr4) (string_of_propositional_expr preprocessed);
    let clauses = cnf_clauses preprocessed in
    Printf.printf "CNF Clauses:\n";
    List.iteri (fun i clause ->
        let clause_str = String.concat " ∨ " (List.map string_of_propositional_expr clause) in
        Printf.printf "  Clause %d: %s\n" (i+1) clause_str
    ) clauses;

    if List.length clauses >= 2 then
        let c1 = List.nth clauses 0 in
        let c2 = List.nth clauses 1 in
        let resolvents = find_resolvents c1 c2 in
        Printf.printf "Resolvents between clause 1 and 2:\n";
        if List.length resolvents = 0 then
            Printf.printf "  No resolvents found (no complementary literals)\n"
        else
            List.iteri (fun i res ->
                let res_str = String.concat " ∨ " (List.map string_of_propositional_expr res) in
                Printf.printf "  Resolvent %d: %s\n" (i+1) res_str
            ) resolvents
    else
        Printf.printf "Not enough clauses for resolution test\n";
    Printf.printf "\n";

    (* Test 2: expr5 - should have resolvents *)
    Printf.printf "Test 2 - Testing resolution with complementary literals:\n";
    let preprocessed5 = resolution_preprocessing expr5 in
    Printf.printf "Preprocessed %s: %s\n" (string_of_propositional_expr expr5) (string_of_propositional_expr preprocessed5);
    let clauses5 = cnf_clauses preprocessed5 in
    Printf.printf "CNF Clauses:\n";
    List.iteri (fun i clause ->
        let clause_str = String.concat " ∨ " (List.map string_of_propositional_expr clause) in
        Printf.printf "  Clause %d: %s\n" (i+1) clause_str
    ) clauses5;

    if List.length clauses5 >= 2 then
        let c1 = List.nth clauses5 1 in
        let c2 = List.nth clauses5 2 in
        let resolvents = find_resolvents c1 c2 in
        Printf.printf "Resolvents between clause 2 and 3:\n";
        if List.length resolvents = 0 then
            Printf.printf "  No resolvents found\n"
        else
            List.iteri (fun i res ->
                let res_str = String.concat " ∨ " (List.map string_of_propositional_expr res) in
                Printf.printf "  Resolvent %d: %s\n" (i+1) res_str
            ) resolvents
    else
        Printf.printf "Not enough clauses for resolution test\n";
    Printf.printf "\n"


let run_all_tests () =
    run_nf_tests ();
    run_proof_procedures_propositional_tests ()


let () = run_all_tests ()
